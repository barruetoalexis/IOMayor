name: SonarCloud
on:
  push:
    branches:
      - 'IOBasic'
jobs:
  Sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    environment: EnviromentVariables
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create SonarCloud Project
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        PROJECT_KEY='IOMayor'
        ORGANIZATION_KEY='pruebas0'
        
        # Check if project already exists
        PROJECT_EXISTS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/projects/search?projects=${PROJECT_KEY}" | jq -r '.components | length')

        if [ "$PROJECT_EXISTS" -eq "0" ]; then
          echo "Project does not exist. Creating the project in SonarCloud..."
          curl -X POST -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/projects/create?project=${PROJECT_KEY}&organization=${ORGANIZATION_KEY}&name=${PROJECT_KEY}"
        else
          echo "Project already exists."
        fi

    - name: Install Sonar Scanner
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner-cli-4.6.2.2472-linux.zip
        export PATH="$PATH:$(pwd)/sonar-scanner-4.6.2.2472-linux/bin"

    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: .
        entryPoint: sonar-scanner
        args: >
          -Dsonar.projectKey=IOMayor
          -Dsonar.organization=pruebas0
          -Dsonar.host.url=https://sonarcloud.io 


  Screenshot:
    runs-on: ubuntu-latest
    needs: Sonarcloud

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Puppeteer
        run: |
          npm init -y
          npm install puppeteer

      - name: Capture screenshot
        run: |
        run: |
          node -e "const puppeteer = require('puppeteer'); \
            (async () => { \
              const browser = await puppeteer.launch({ headless: false }); /* Cambia a true para ejecutar en modo headless */ \
              const page = await browser.newPage(); \
              await page.setViewport({ width: 1920, height: 1080 }); \
              await page.goto('https://sonarcloud.io/login?return_to=%2Fexplore%2Fprojects'); /* URL de la página que usa GitHub para autenticación */ \
              await page.click('a[href*=\"github.com/login\"]'); /* Haz clic en el botón de inicio de sesión con GitHub */ \
              /* Espera a que la página de GitHub se cargue */ \
              await page.waitForSelector('input[name=\"login\"]'); \
              await page.type('input[name=\"login\"]', process.env.GITHUB_USERNAME); \
              await page.type('input[name=\"password\"]', process.env.GITHUB_PASSWORD); \
              await page.click('input[name=\"commit\"]'); /* Haz clic en el botón de inicio de sesión en GitHub */ \
              await page.waitForNavigation(); /* Espera a que la navegación se complete */ \
              /* Captura de la primera URL después de iniciar sesión */ \
              await page.goto('https://sonarcloud.io/summary/new_code?id=IOMayor&branch=IOBasic'); \
              await page.screenshot({ path: 'screenshot1.png', fullPage: true }); \
              /* Captura de la segunda URL después de iniciar sesión */ \
              await page.goto('https://sonarcloud.io/project/issues?issueStatuses=OPEN%2CCONFIRMED&branch=IOBasic&id=IOMayor'); \
              await page.screenshot({ path: 'screenshot2.png', fullPage: true }); \
              await browser.close(); \
            })();"

      - name: Upload screenshot as artifact
        uses: actions/upload-artifact@v3
        with:
          name: screenshot
          path: screenshot.png