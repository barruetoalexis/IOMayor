	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 1 (at line 1).	
	
	
	
	
	
    STEP 1	
	
        The type of query is SET STATISTICS ON.	
	
	
	
Total estimated I/O cost for statement 1 (at line 1): 0.	
	
	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
	
	
QUERY PLAN FOR STATEMENT 1 (at line 1).	
	
	
	
	
	
    STEP 1	
	
        The type of query is SET OPTION ON.	
	
	
	
Total estimated I/O cost for statement 1 (at line 1): 0.	
	
	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
	
	
QUERY PLAN FOR STATEMENT 1 (at line 1).	
	
	
	
	
	
    STEP 1	
	
        The type of query is EXECUTE.	
	
	
	
Total estimated I/O cost for statement 1 (at line 1): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 1 (at line 0).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DECLARE.	
	
	
	
Total estimated I/O cost for statement 1 (at line 0): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 2 (at line 44).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 2 (at line 44): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 3 (at line 47).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 3 (at line 47): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 4 (at line 49).	
	
	
	
	
	
    STEP 1	
	
        The type of query is CREATE TABLE.	
	
	
	
Total estimated I/O cost for statement 4 (at line 49): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 5 (at line 65).	
	
	
	
	
	
    STEP 1	
	
        The type of query is CREATE TABLE.	
	
	
	
Total estimated I/O cost for statement 5 (at line 65): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 6 (at line 70).	
	
	
	
	
	
    STEP 1	
	
        The type of query is CREATE TABLE.	
	
	
	
Total estimated I/O cost for statement 6 (at line 70): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 7 (at line 82).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	2 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 2)	
	
       |	
	
       |   |RESTRICT Operator (VA = 1)(0)(0)(0)(0)(3)	
	
       |   |	
	
       |   |   |SCAN Operator (VA = 0)	
	
       |   |   |  FROM TABLE	
	
       |   |   |  par	
	
       |   |   |  Using Clustered Index.	
	
       |   |   |  Index : par_i1	
	
       |   |   |  Forward Scan.	
	
       |   |   |  Positioning by key.	
	
       |   |   |  Keys are:	
	
       |   |   |    par_tab ASC	
	
       |   |   |    par_cod ASC	
	
       |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 7 (at line 82): 81.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 8 (at line 85).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	2 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 2)	
	
       |	
	
       |   |RESTRICT Operator (VA = 1)(0)(0)(0)(0)(3)	
	
       |   |	
	
       |   |   |SCAN Operator (VA = 0)	
	
       |   |   |  FROM TABLE	
	
       |   |   |  par	
	
       |   |   |  Using Clustered Index.	
	
       |   |   |  Index : par_i1	
	
       |   |   |  Forward Scan.	
	
       |   |   |  Positioning by key.	
	
       |   |   |  Keys are:	
	
       |   |   |    par_tab ASC	
	
       |   |   |    par_cod ASC	
	
       |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 8 (at line 85): 81.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 9 (at line 86).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	2 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 2)	
	
       |	
	
       |   |RESTRICT Operator (VA = 1)(0)(0)(0)(0)(3)	
	
       |   |	
	
       |   |   |SCAN Operator (VA = 0)	
	
       |   |   |  FROM TABLE	
	
       |   |   |  par	
	
       |   |   |  Using Clustered Index.	
	
       |   |   |  Index : par_i1	
	
       |   |   |  Forward Scan.	
	
       |   |   |  Positioning by key.	
	
       |   |   |  Keys are:	
	
       |   |   |    par_tab ASC	
	
       |   |   |    par_cod ASC	
	
       |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 9 (at line 86): 81.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 10 (at line 87).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	2 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 2)	
	
       |	
	
       |   |RESTRICT Operator (VA = 1)(0)(0)(0)(0)(3)	
	
       |   |	
	
       |   |   |SCAN Operator (VA = 0)	
	
       |   |   |  FROM TABLE	
	
       |   |   |  par	
	
       |   |   |  Using Clustered Index.	
	
       |   |   |  Index : par_i1	
	
       |   |   |  Forward Scan.	
	
       |   |   |  Positioning by key.	
	
       |   |   |  Keys are:	
	
       |   |   |    par_tab ASC	
	
       |   |   |    par_cod ASC	
	
       |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 10 (at line 87): 81.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 11 (at line 88).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	2 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 2)	
	
       |	
	
       |   |RESTRICT Operator (VA = 1)(0)(0)(0)(0)(3)	
	
       |   |	
	
       |   |   |SCAN Operator (VA = 0)	
	
       |   |   |  FROM TABLE	
	
       |   |   |  par	
	
       |   |   |  Using Clustered Index.	
	
       |   |   |  Index : par_i1	
	
       |   |   |  Forward Scan.	
	
       |   |   |  Positioning by key.	
	
       |   |   |  Keys are:	
	
       |   |   |    par_tab ASC	
	
       |   |   |    par_cod ASC	
	
       |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 11 (at line 88): 81.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 12 (at line 91).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	2 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 2)	
	
       |	
	
       |   |RESTRICT Operator (VA = 1)(0)(0)(0)(0)(3)	
	
       |   |	
	
       |   |   |SCAN Operator (VA = 0)	
	
       |   |   |  FROM TABLE	
	
       |   |   |  par	
	
       |   |   |  Using Clustered Index.	
	
       |   |   |  Index : par_i1	
	
       |   |   |  Forward Scan.	
	
       |   |   |  Positioning by key.	
	
       |   |   |  Keys are:	
	
       |   |   |    par_tab ASC	
	
       |   |   |    par_cod ASC	
	
       |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 12 (at line 91): 81.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 13 (at line 92).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	2 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 2)	
	
       |	
	
       |   |RESTRICT Operator (VA = 1)(0)(0)(0)(0)(3)	
	
       |   |	
	
       |   |   |SCAN Operator (VA = 0)	
	
       |   |   |  FROM TABLE	
	
       |   |   |  par	
	
       |   |   |  Using Clustered Index.	
	
       |   |   |  Index : par_i1	
	
       |   |   |  Forward Scan.	
	
       |   |   |  Positioning by key.	
	
       |   |   |  Keys are:	
	
       |   |   |    par_tab ASC	
	
       |   |   |    par_cod ASC	
	
       |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 13 (at line 92): 81.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 14 (at line 93).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	2 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 2)	
	
       |	
	
       |   |RESTRICT Operator (VA = 1)(0)(0)(0)(0)(3)	
	
       |   |	
	
       |   |   |SCAN Operator (VA = 0)	
	
       |   |   |  FROM TABLE	
	
       |   |   |  par	
	
       |   |   |  Using Clustered Index.	
	
       |   |   |  Index : par_i1	
	
       |   |   |  Forward Scan.	
	
       |   |   |  Positioning by key.	
	
       |   |   |  Keys are:	
	
       |   |   |    par_tab ASC	
	
       |   |   |    par_cod ASC	
	
       |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 14 (at line 93): 81.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 15 (at line 96).	
	
Optimized using Deferred Compilation.	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is INSERT.	
	
	
	
	2 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 2)	
	
       |	
	
       |   |INSERT Operator (VA = 1)	
	
       |   |  The update mode is direct.	
	
       |   |	
	
       |   |   |SCAN Operator (VA = 0)	
	
       |   |   |  FROM TABLE	
	
       |   |   |  npd_nomina_pagadr_dia_tmp	
	
       |   |   |  Table Scan.	
	
       |   |   |  Forward Scan.	
	
       |   |   |  Positioning at start of table.	
	
       |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |	
	
       |   |  TO TABLE	
	
       |   |  #documentos	
	
       |   |  Using I/O Size 8 Kbytes for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 15 (at line 96): 56.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 16 (at line 116).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 16 (at line 116): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 17 (at line 118).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 17 (at line 118): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 18 (at line 119).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 18 (at line 119): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 19 (at line 120).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 19 (at line 120): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 20 (at line 121).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 20 (at line 121): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 21 (at line 122).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 21 (at line 122): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 22 (at line 123).	
	
	
	
	
	
    STEP 1	
	
        The type of query is RETURN.	
	
	
	
Total estimated I/O cost for statement 22 (at line 123): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 23 (at line 129).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	4 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 4)	
	
       |	
	
       |   |SQFILTER Operator (VA = 3) has 2 children.	
	
       |   |	
	
       |   |   |SCALAR Operator (VA = 0) 	
	
       |   |	
	
       |   |  Run subquery 1 (at nesting level 1).	
	
       |   |	
	
       |   |  QUERY PLAN FOR SUBQUERY 1 (at nesting level 1 and at line 129).	
	
       |   |	
	
       |   |   Non-correlated Subquery.	
	
       |   |   Subquery under an EXISTS predicate.	
	
       |   |	
	
       |   |   |SCALAR AGGREGATE Operator (VA = 2)	
	
       |   |   |  Evaluate Ungrouped ANY AGGREGATE.	
	
       |   |   |  Scanning only up to the first qualifying row.	
	
       |   |   |	
	
       |   |   |   |SCAN Operator (VA = 1)	
	
       |   |   |   |  FROM TABLE	
	
       |   |   |   |  hdp_homolga_dato_pagador	
	
       |   |   |   |  Index : hdp_homolg_4064456412	
	
       |   |   |   |  Forward Scan.	
	
       |   |   |   |  Positioning by key.	
	
       |   |   |   |  Index contains all needed columns. Base table will not be read.	
	
       |   |   |   |  Keys are:	
	
       |   |   |   |    cnp_rut_pagador ASC	
	
       |   |   |   |    ucn_id_campo ASC	
	
       |   |   |   |  Using I/O Size 8 Kbytes for index leaf pages.	
	
       |   |   |   |  With LRU Buffer Replacement Strategy for index leaf pages.	
	
       |   |	
	
       |   |  END OF QUERY PLAN FOR SUBQUERY 1.	
	
	
	
	
	
Total estimated I/O cost for statement 23 (at line 129): 21969.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 24 (at line 131).	
	
To be Optimized at runtime using Deferred Compilation.	
	
	
	
	
	
Total estimated I/O cost for statement 24 (at line 131): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 25 (at line 138).	
	
To be Optimized at runtime using Deferred Compilation.	
	
	
	
	
	
Total estimated I/O cost for statement 25 (at line 138): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 26 (at line 150).	
	
Optimized using Deferred Compilation.	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is INSERT.	
	
	
	
	4 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 4)	
	
       |	
	
       |   |INSERT Operator (VA = 3)	
	
       |   |  The update mode is direct.	
	
       |   |	
	
       |   |   |NESTED LOOP JOIN Operator (VA = 2) (Join Type: Inner Join)	
	
       |   |   |	
	
       |   |   |   |SCAN Operator (VA = 0)	
	
       |   |   |   |  FROM TABLE	
	
       |   |   |   |  #documentos	
	
       |   |   |   |  d	
	
       |   |   |   |  Table Scan.	
	
       |   |   |   |  Forward Scan.	
	
       |   |   |   |  Positioning at start of table.	
	
       |   |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |   |	
	
       |   |   |   |SCAN Operator (VA = 1)	
	
       |   |   |   |  FROM TABLE	
	
       |   |   |   |  pde_pagadr_doc_env_bel_his	
	
       |   |   |   |  h	
	
       |   |   |   |  Table Scan.	
	
       |   |   |   |  Forward Scan.	
	
       |   |   |   |  Positioning at start of table.	
	
       |   |   |   |  Using I/O Size 32 Kbytes for data pages.	
	
       |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |	
	
       |   |  TO TABLE	
	
       |   |  #doc_historicos	
	
       |   |  Using I/O Size 8 Kbytes for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 26 (at line 150): 2162.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 27 (at line 167).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 27 (at line 167): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 28 (at line 169).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 28 (at line 169): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 29 (at line 170).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 29 (at line 170): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 30 (at line 171).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 30 (at line 171): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 31 (at line 172).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 31 (at line 172): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 32 (at line 173).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 32 (at line 173): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 33 (at line 174).	
	
	
	
	
	
    STEP 1	
	
        The type of query is RETURN.	
	
	
	
Total estimated I/O cost for statement 33 (at line 174): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 34 (at line 178).	
	
Optimized using Deferred Compilation.	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is UPDATE.	
	
	
	
	4 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 4)	
	
       |	
	
       |   |UPDATE Operator (VA = 3)	
	
       |   |  The update mode is direct.	
	
       |   |	
	
       |   |   |NESTED LOOP JOIN Operator (VA = 2) (Join Type: Left Semi Join)	
	
       |   |   |	
	
       |   |   |   |SCAN Operator (VA = 0)	
	
       |   |   |   |  FROM TABLE	
	
       |   |   |   |  #doc_historicos	
	
       |   |   |   |  d	
	
       |   |   |   |  Table Scan.	
	
       |   |   |   |  Forward Scan.	
	
       |   |   |   |  Positioning at start of table.	
	
       |   |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |   |	
	
       |   |   |   |SCAN Operator (VA = 1)	
	
       |   |   |   |  FROM TABLE	
	
       |   |   |   |  fpb_fol_pagador_bel_his	
	
       |   |   |   |  h	
	
       |   |   |   |  Table Scan.	
	
       |   |   |   |  Forward Scan.	
	
       |   |   |   |  Positioning at start of table.	
	
       |   |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |	
	
       |   |  TO TABLE	
	
       |   |  #doc_historicos	
	
       |   |  Using I/O Size 8 Kbytes for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 34 (at line 178): 66.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 35 (at line 185).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	7 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 7)	
	
       |	
	
       |   |SQFILTER Operator (VA = 6) has 2 children.	
	
       |   |	
	
       |   |   |SCALAR Operator (VA = 0) 	
	
       |   |	
	
       |   |  Run subquery 1 (at nesting level 1).	
	
       |   |	
	
       |   |  QUERY PLAN FOR SUBQUERY 1 (at nesting level 1 and at line 185).	
	
       |   |	
	
       |   |   Non-correlated Subquery.	
	
       |   |   Subquery under an EXISTS predicate.	
	
       |   |	
	
       |   |   |SCALAR AGGREGATE Operator (VA = 5)	
	
       |   |   |  Evaluate Ungrouped ANY AGGREGATE.	
	
       |   |   |  Scanning only up to the first qualifying row.	
	
       |   |   |	
	
       |   |   |   |NESTED LOOP JOIN Operator (VA = 4) (Join Type: Left Semi Join)	
	
       |   |   |   |	
	
       |   |   |   |   |SCAN Operator (VA = 1)	
	
       |   |   |   |   |  FROM TABLE	
	
       |   |   |   |   |  #doc_historicos	
	
       |   |   |   |   |  Table Scan.	
	
       |   |   |   |   |  Forward Scan.	
	
       |   |   |   |   |  Positioning at start of table.	
	
       |   |   |   |   |  Using I/O Size 32 Kbytes for data pages.	
	
       |   |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |   |   |	
	
       |   |   |   |   |RESTRICT Operator (VA = 3)(0)(0)(0)(6)(0)	
	
       |   |   |   |   |	
	
       |   |   |   |   |   |SCAN Operator (VA = 2)	
	
       |   |   |   |   |   |  FROM TABLE	
	
       |   |   |   |   |   |  par	
	
       |   |   |   |   |   |  Using Clustered Index.	
	
       |   |   |   |   |   |  Index : par_i1	
	
       |   |   |   |   |   |  Forward Scan.	
	
       |   |   |   |   |   |  Positioning by key.	
	
       |   |   |   |   |   |  Keys are:	
	
       |   |   |   |   |   |    par_tab ASC	
	
       |   |   |   |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |	
	
       |   |  END OF QUERY PLAN FOR SUBQUERY 1.	
	
	
	
	
	
Total estimated I/O cost for statement 35 (at line 185): 94943.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 36 (at line 190).	
	
To be Optimized at runtime using Deferred Compilation.	
	
	
	
	
	
Total estimated I/O cost for statement 36 (at line 190): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 37 (at line 198).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	4 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 4)	
	
       |	
	
       |   |SQFILTER Operator (VA = 3) has 2 children.	
	
       |   |	
	
       |   |   |SCALAR Operator (VA = 0) 	
	
       |   |	
	
       |   |  Run subquery 1 (at nesting level 1).	
	
       |   |	
	
       |   |  QUERY PLAN FOR SUBQUERY 1 (at nesting level 1 and at line 198).	
	
       |   |	
	
       |   |   Non-correlated Subquery.	
	
       |   |   Subquery under an EXISTS predicate.	
	
       |   |	
	
       |   |   |SCALAR AGGREGATE Operator (VA = 2)	
	
       |   |   |  Evaluate Ungrouped ANY AGGREGATE.	
	
       |   |   |  Scanning only up to the first qualifying row.	
	
       |   |   |	
	
       |   |   |   |SCAN Operator (VA = 1)	
	
       |   |   |   |  FROM TABLE	
	
       |   |   |   |  #doc_historicos	
	
       |   |   |   |  Table Scan.	
	
       |   |   |   |  Forward Scan.	
	
       |   |   |   |  Positioning at start of table.	
	
       |   |   |   |  Using I/O Size 32 Kbytes for data pages.	
	
       |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |	
	
       |   |  END OF QUERY PLAN FOR SUBQUERY 1.	
	
	
	
	
	
Total estimated I/O cost for statement 37 (at line 198): 50230.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 38 (at line 201).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	5 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 5)	
	
       |	
	
       |   |SQFILTER Operator (VA = 4) has 2 children.	
	
       |   |	
	
       |   |   |SCALAR Operator (VA = 0) 	
	
       |   |	
	
       |   |  Run subquery 1 (at nesting level 1).	
	
       |   |	
	
       |   |  QUERY PLAN FOR SUBQUERY 1 (at nesting level 1 and at line 201).	
	
       |   |	
	
       |   |   Non-correlated Subquery.	
	
       |   |   Subquery under an EXISTS predicate.	
	
       |   |	
	
       |   |   |SCALAR AGGREGATE Operator (VA = 3)	
	
       |   |   |  Evaluate Ungrouped ANY AGGREGATE.	
	
       |   |   |  Scanning only up to the first qualifying row.	
	
       |   |   |	
	
       |   |   |   |RESTRICT Operator (VA = 2)(0)(0)(0)(15)(0)	
	
       |   |   |   |	
	
       |   |   |   |   |SCAN Operator (VA = 1)	
	
       |   |   |   |   |  FROM TABLE	
	
       |   |   |   |   |  #doc_historicos	
	
       |   |   |   |   |  Table Scan.	
	
       |   |   |   |   |  Forward Scan.	
	
       |   |   |   |   |  Positioning at start of table.	
	
       |   |   |   |   |  Using I/O Size 32 Kbytes for data pages.	
	
       |   |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |	
	
       |   |  END OF QUERY PLAN FOR SUBQUERY 1.	
	
	
	
	
	
Total estimated I/O cost for statement 38 (at line 201): 49780.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 39 (at line 203).	
	
To be Optimized at runtime using Deferred Compilation.	
	
	
	
	
	
Total estimated I/O cost for statement 39 (at line 203): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 40 (at line 216).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	8 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 8)	
	
       |	
	
       |   |SQFILTER Operator (VA = 7) has 2 children.	
	
       |   |	
	
       |   |   |SCALAR Operator (VA = 0) 	
	
       |   |	
	
       |   |  Run subquery 1 (at nesting level 1).	
	
       |   |	
	
       |   |  QUERY PLAN FOR SUBQUERY 1 (at nesting level 1 and at line 216).	
	
       |   |	
	
       |   |   Non-correlated Subquery.	
	
       |   |   Subquery under an EXISTS predicate.	
	
       |   |	
	
       |   |   |SCALAR AGGREGATE Operator (VA = 6)	
	
       |   |   |  Evaluate Ungrouped ANY AGGREGATE.	
	
       |   |   |  Scanning only up to the first qualifying row.	
	
       |   |   |	
	
       |   |   |   |NESTED LOOP JOIN Operator (VA = 5) (Join Type: Left Semi Join)	
	
       |   |   |   |	
	
       |   |   |   |   |RESTRICT Operator (VA = 2)(0)(0)(0)(6)(0)	
	
       |   |   |   |   |	
	
       |   |   |   |   |   |SCAN Operator (VA = 1)	
	
       |   |   |   |   |   |  FROM TABLE	
	
       |   |   |   |   |   |  #doc_historicos	
	
       |   |   |   |   |   |  Table Scan.	
	
       |   |   |   |   |   |  Forward Scan.	
	
       |   |   |   |   |   |  Positioning at start of table.	
	
       |   |   |   |   |   |  Using I/O Size 32 Kbytes for data pages.	
	
       |   |   |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |   |   |	
	
       |   |   |   |   |RESTRICT Operator (VA = 4)(0)(0)(0)(6)(0)	
	
       |   |   |   |   |	
	
       |   |   |   |   |   |SCAN Operator (VA = 3)	
	
       |   |   |   |   |   |  FROM TABLE	
	
       |   |   |   |   |   |  par	
	
       |   |   |   |   |   |  Using Clustered Index.	
	
       |   |   |   |   |   |  Index : par_i1	
	
       |   |   |   |   |   |  Forward Scan.	
	
       |   |   |   |   |   |  Positioning by key.	
	
       |   |   |   |   |   |  Keys are:	
	
       |   |   |   |   |   |    par_tab ASC	
	
       |   |   |   |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |	
	
       |   |  END OF QUERY PLAN FOR SUBQUERY 1.	
	
	
	
	
	
Total estimated I/O cost for statement 40 (at line 216): 83686.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 41 (at line 222).	
	
To be Optimized at runtime using Deferred Compilation.	
	
	
	
	
	
Total estimated I/O cost for statement 41 (at line 222): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 42 (at line 238).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	5 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 5)	
	
       |	
	
       |   |SQFILTER Operator (VA = 4) has 2 children.	
	
       |   |	
	
       |   |   |SCALAR Operator (VA = 0) 	
	
       |   |	
	
       |   |  Run subquery 1 (at nesting level 1).	
	
       |   |	
	
       |   |  QUERY PLAN FOR SUBQUERY 1 (at nesting level 1 and at line 238).	
	
       |   |	
	
       |   |   Non-correlated Subquery.	
	
       |   |   Subquery under an EXISTS predicate.	
	
       |   |	
	
       |   |   |SCALAR AGGREGATE Operator (VA = 3)	
	
       |   |   |  Evaluate Ungrouped ANY AGGREGATE.	
	
       |   |   |  Scanning only up to the first qualifying row.	
	
       |   |   |	
	
       |   |   |   |RESTRICT Operator (VA = 2)(0)(0)(0)(6)(0)	
	
       |   |   |   |	
	
       |   |   |   |   |SCAN Operator (VA = 1)	
	
       |   |   |   |   |  FROM TABLE	
	
       |   |   |   |   |  #doc_historicos	
	
       |   |   |   |   |  Table Scan.	
	
       |   |   |   |   |  Forward Scan.	
	
       |   |   |   |   |  Positioning at start of table.	
	
       |   |   |   |   |  Using I/O Size 32 Kbytes for data pages.	
	
       |   |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |	
	
       |   |  END OF QUERY PLAN FOR SUBQUERY 1.	
	
	
	
	
	
Total estimated I/O cost for statement 42 (at line 238): 50080.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 43 (at line 240).	
	
To be Optimized at runtime using Deferred Compilation.	
	
	
	
	
	
Total estimated I/O cost for statement 43 (at line 240): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 44 (at line 0).	
	
	
	
	
	
    STEP 1	
	
        The type of query is GOTO.	
	
	
	
Total estimated I/O cost for statement 44 (at line 0): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 45 (at line 257).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	4 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 4)	
	
       |	
	
       |   |SQFILTER Operator (VA = 3) has 2 children.	
	
       |   |	
	
       |   |   |SCALAR Operator (VA = 0) 	
	
       |   |	
	
       |   |  Run subquery 1 (at nesting level 1).	
	
       |   |	
	
       |   |  QUERY PLAN FOR SUBQUERY 1 (at nesting level 1 and at line 257).	
	
       |   |	
	
       |   |   Non-correlated Subquery.	
	
       |   |   Subquery under an EXISTS predicate.	
	
       |   |	
	
       |   |   |SCALAR AGGREGATE Operator (VA = 2)	
	
       |   |   |  Evaluate Ungrouped ANY AGGREGATE.	
	
       |   |   |  Scanning only up to the first qualifying row.	
	
       |   |   |	
	
       |   |   |   |SCAN Operator (VA = 1)	
	
       |   |   |   |  FROM TABLE	
	
       |   |   |   |  #documentos	
	
       |   |   |   |  Table Scan.	
	
       |   |   |   |  Forward Scan.	
	
       |   |   |   |  Positioning at start of table.	
	
       |   |   |   |  Using I/O Size 32 Kbytes for data pages.	
	
       |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |	
	
       |   |  END OF QUERY PLAN FOR SUBQUERY 1.	
	
	
	
	
	
Total estimated I/O cost for statement 45 (at line 257): 49419.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 46 (at line 260).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 46 (at line 260): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 47 (at line 261).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 47 (at line 261): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 48 (at line 262).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 48 (at line 262): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 49 (at line 263).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 49 (at line 263): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 50 (at line 264).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 50 (at line 264): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 51 (at line 265).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 51 (at line 265): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 52 (at line 266).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 52 (at line 266): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 53 (at line 268).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	2 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 2)	
	
       |	
	
       |   |TOP Operator (VA = 1)	
	
       |   |  Top Limit: 1	
	
       |   |	
	
       |   |   |SCAN Operator (VA = 0)	
	
       |   |   |  FROM TABLE	
	
       |   |   |  #documentos	
	
       |   |   |  Table Scan.	
	
       |   |   |  Forward Scan.	
	
       |   |   |  Positioning at start of table.	
	
       |   |   |  Using I/O Size 32 Kbytes for data pages.	
	
       |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 53 (at line 268): 155.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 54 (at line 277).	
	
	
	
	
	
    STEP 1	
	
        The type of query is EXECUTE.	
	
	
	
Total estimated I/O cost for statement 54 (at line 277): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 55 (at line 279).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 55 (at line 279): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 56 (at line 281).	
	
	
	
	
	
    STEP 1	
	
        The type of query is EXECUTE.	
	
	
	
Total estimated I/O cost for statement 56 (at line 281): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 57 (at line 283).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 57 (at line 283): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 58 (at line 285).	
	
	
	
	
	
    STEP 1	
	
        The type of query is EXECUTE.	
	
	
	
Total estimated I/O cost for statement 58 (at line 285): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 59 (at line 287).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 59 (at line 287): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 60 (at line 289).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 60 (at line 289): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 61 (at line 0).	
	
	
	
	
	
    STEP 1	
	
        The type of query is GOTO.	
	
	
	
Total estimated I/O cost for statement 61 (at line 0): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 62 (at line 294).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 62 (at line 294): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 63 (at line 0).	
	
	
	
	
	
    STEP 1	
	
        The type of query is GOTO.	
	
	
	
Total estimated I/O cost for statement 63 (at line 0): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 64 (at line 299).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 64 (at line 299): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 65 (at line 303).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 65 (at line 303): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 66 (at line 305).	
	
	
	
	
	
    STEP 1	
	
        The type of query is EXECUTE.	
	
	
	
Total estimated I/O cost for statement 66 (at line 305): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 67 (at line 307).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 67 (at line 307): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 68 (at line 309).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 68 (at line 309): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 69 (at line 0).	
	
	
	
	
	
    STEP 1	
	
        The type of query is GOTO.	
	
	
	
Total estimated I/O cost for statement 69 (at line 0): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 70 (at line 313).	
	
To be Optimized at runtime using Deferred Compilation.	
	
	
	
	
	
Total estimated I/O cost for statement 70 (at line 313): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 71 (at line 325).	
	
Optimized using Deferred Compilation.	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is UPDATE.	
	
	
	
	4 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 4)	
	
       |	
	
       |   |UPDATE Operator (VA = 3)	
	
       |   |  The update mode is deferred.	
	
       |   |	
	
       |   |   |NESTED LOOP JOIN Operator (VA = 2) (Join Type: Inner Join)	
	
       |   |   |	
	
       |   |   |   |SCAN Operator (VA = 0)	
	
       |   |   |   |  FROM TABLE	
	
       |   |   |   |  #documentos	
	
       |   |   |   |  d	
	
       |   |   |   |  Table Scan.	
	
       |   |   |   |  Forward Scan.	
	
       |   |   |   |  Positioning at start of table.	
	
       |   |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |   |	
	
       |   |   |   |SCAN Operator (VA = 1)	
	
       |   |   |   |  FROM TABLE	
	
       |   |   |   |  npd_nomina_pagadr_dia_tmp	
	
       |   |   |   |  n	
	
       |   |   |   |  Table Scan.	
	
       |   |   |   |  Forward Scan.	
	
       |   |   |   |  Positioning at start of table.	
	
       |   |   |   |  Using I/O Size 8 Kbytes for data pages.	
	
       |   |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |	
	
       |   |  TO TABLE	
	
       |   |  npd_nomina_pagadr_dia_tmp	
	
       |   |  Using I/O Size 8 Kbytes for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 71 (at line 325): 56.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 72 (at line 338).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 72 (at line 338): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 73 (at line 340).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 73 (at line 340): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 74 (at line 341).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 74 (at line 341): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 75 (at line 342).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 75 (at line 342): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 76 (at line 343).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 76 (at line 343): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 77 (at line 344).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 77 (at line 344): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 78 (at line 345).	
	
	
	
	
	
    STEP 1	
	
        The type of query is RETURN.	
	
	
	
Total estimated I/O cost for statement 78 (at line 345): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 79 (at line 349).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is INSERT.	
	
	
	
	2 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 2)	
	
       |	
	
       |   |INSERT Operator (VA = 1)	
	
       |   |  The update mode is direct.	
	
       |   |	
	
       |   |   |SCAN Operator (VA = 0)	
	
       |   |   |  FROM TABLE	
	
       |   |   |  #documentos	
	
       |   |   |  Table Scan.	
	
       |   |   |  Forward Scan.	
	
       |   |   |  Positioning at start of table.	
	
       |   |   |  Using I/O Size 32 Kbytes for data pages.	
	
       |   |   |  With LRU Buffer Replacement Strategy for data pages.	
	
       |   |	
	
       |   |  TO TABLE	
	
       |   |  den_det_estado_nmn_tmp	
	
       |   |  Using I/O Size 8 Kbytes for data pages.	
	
	
	
	
	
Total estimated I/O cost for statement 79 (at line 349): 185.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 80 (at line 354).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is COND.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 80 (at line 354): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 81 (at line 356).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 81 (at line 356): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 82 (at line 357).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 82 (at line 357): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 83 (at line 358).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 83 (at line 358): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 84 (at line 359).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 84 (at line 359): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 85 (at line 360).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 85 (at line 360): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 86 (at line 361).	
	
	
	
	
	
    STEP 1	
	
        The type of query is RETURN.	
	
	
	
Total estimated I/O cost for statement 86 (at line 361): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 87 (at line 365).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 87 (at line 365): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 88 (at line 366).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 88 (at line 366): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 89 (at line 367).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 89 (at line 367): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 90 (at line 368).	
	
	
	
	
	
    STEP 1	
	
        The type of query is DROP TABLE.	
	
	
	
Total estimated I/O cost for statement 90 (at line 368): 0.	
	
	
	
	
	
QUERY PLAN FOR STATEMENT 91 (at line 370).	
	
Optimized using Serial Mode	
	
	
	
	
	
    STEP 1	
	
        The type of query is SELECT.	
	
	
	
	1 operator(s) under root
	
	
	
       |ROOT:EMIT Operator (VA = 1)	
	
       |	
	
       |   |SCALAR Operator (VA = 0) 	
	
	
	
	
	
Total estimated I/O cost for statement 91 (at line 370): 0.	
	
	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
Table: par scan count 1, logical reads: (regular=3 apf=0 total=3), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 6.	
	
Total writes for this command: 0	
	
Table: par scan count 1, logical reads: (regular=3 apf=0 total=3), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 6.	
	
Total writes for this command: 0	
	
Table: par scan count 1, logical reads: (regular=3 apf=0 total=3), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 6.	
	
Total writes for this command: 0	
	
Table: par scan count 1, logical reads: (regular=3 apf=0 total=3), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 6.	
	
Total writes for this command: 0	
	
Table: par scan count 1, logical reads: (regular=3 apf=0 total=3), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 6.	
	
Total writes for this command: 0	
	
Table: par scan count 1, logical reads: (regular=3 apf=0 total=3), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 6.	
	
Total writes for this command: 0	
	
Table: par scan count 1, logical reads: (regular=3 apf=0 total=3), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 6.	
	
Total writes for this command: 0	
	
Table: par scan count 1, logical reads: (regular=3 apf=0 total=3), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 6.	
	
Total writes for this command: 0	
	
Table: #documentos scan count 0, logical reads: (regular=0 apf=0 total=0), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Table: npd_nomina_pagadr_dia_tmp scan count 1, logical reads: (regular=1 apf=0 total=1), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 2.	
	
Total writes for this command: 0	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
Table: hdp_homolga_dato_pagador scan count 1, logical reads: (regular=2 apf=0 total=2), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 4.	
	
Total writes for this command: 0	
	
Table: #doc_historicos scan count 0, logical reads: (regular=0 apf=0 total=0), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Table: #documentos (d) scan count 1, logical reads: (regular=1 apf=0 total=1), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Table: pde_pagadr_doc_env_bel_his (h) scan count 0, logical reads: (regular=0 apf=0 total=0), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 2.	
	
Total writes for this command: 0	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
Table: #doc_historicos scan count 0, logical reads: (regular=0 apf=0 total=0), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Table: #doc_historicos (d) scan count 1, logical reads: (regular=1 apf=0 total=1), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Table: fpb_fol_pagador_bel_his (h) scan count 0, logical reads: (regular=0 apf=0 total=0), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 2.	
	
Total writes for this command: 0	
	
Table: #doc_historicos scan count 1, logical reads: (regular=1 apf=0 total=1), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Table: par scan count 0, logical reads: (regular=0 apf=0 total=0), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 2.	
	
Total writes for this command: 0	
	
Table: #doc_historicos scan count 1, logical reads: (regular=1 apf=0 total=1), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 2.	
	
Total writes for this command: 0	
	
Table: #documentos scan count 1, logical reads: (regular=1 apf=0 total=1), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 2.	
	
Total writes for this command: 0	
	
Table: npd_nomina_pagadr_dia_tmp scan count 0, logical reads: (regular=0 apf=0 total=0), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Table: #documentos (d) scan count 1, logical reads: (regular=1 apf=0 total=1), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Table: npd_nomina_pagadr_dia_tmp (n) scan count 0, logical reads: (regular=0 apf=0 total=0), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 2.	
	
Total writes for this command: 0	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	

Total actual I/O cost for this command: 20530.
	
Table: den_det_estado_nmn_tmp scan count 0, logical reads: (regular=0 apf=0 total=0), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Table: #documentos scan count 1, logical reads: (regular=1 apf=0 total=1), physical reads: (regular=0 apf=0 total=0), apf IOs used=0	
	
Total actual I/O cost for this command: 2.	
	
Total writes for this command: 0	

Total actual I/O cost for this command: 535.
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
	
010P4: Se ha recibido e ignorado un parámetro de salida.	
Total actual I/O cost for this command: 0.	
	
Total writes for this command: 0	
